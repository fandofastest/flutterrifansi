import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:cupertino_stepper/cupertino_stepper.dart';
import 'package:flutterrifansi/core/models/sales_progress.dart';
import 'package:flutterrifansi/core/models/spk_details.dart';
import 'package:flutterrifansi/core/services/api_service.dart';
import 'package:flutterrifansi/core/utils/format_helpers.dart';
import 'package:flutterrifansi/presentation/sales/views/steps/submit_dialog.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';

// Model & service


// Utils

// Widget terpisah
import 'steps/step_content_widget.dart';
import 'steps/summary_step_widget.dart';
import 'steps/sales_form_utils.dart';

class InputSalesView extends StatefulWidget {
  const InputSalesView({Key? key}) : super(key: key);

  @override
  State<InputSalesView> createState() => _InputSalesViewState();
}

class _InputSalesViewState extends State<InputSalesView> {
  late String spkId;
  late ApiService _apiService;
  bool isLoading = true;
  int activeStep = 0;

  SpkDetails? _spkDetails;
  List<Map<String, dynamic>> _selectedItems = [];
  List<Map<String, dynamic>> _categories = [];

  final _storage = GetStorage();
  Map<String, dynamic>? _taskFormData;

  @override
  void initState() {
    super.initState();
    _apiService = Get.find<ApiService>();
    spkId = Get.arguments['spkId'];
    _loadTaskFormData();
    _initializeData();
  }

  // ------------------- LOAD & INITIALIZE DATA -------------------
  void _loadTaskFormData() {
    try {
      final taskData = _storage.read('task_form_data');
      if (taskData != null) {
        setState(() {
          _taskFormData = taskData;
          print('Task form data loaded successfully');
          print('Task form data: ' + '_taskFormData);
        });
      }
    } catch (e) {
      print('Error loading task data: $e');
    }
  }

  Future<void> _initializeData() async {
    try {
      EasyLoading.show(status: 'Loading...');
      final response = await _apiService.getSpkDetails(spkId);
      setState(() {
        _spkDetails = SpkDetails.fromJson(response);
        _categories = _extractCategoriesFromSpk(_spkDetails!.items);
        isLoading = false;
      });
    } catch (e) {
      print('Error: $e');
    } finally {
      EasyLoading.dismiss();
    }
  }

  // ------------------- EXTRACT & LOAD SAVED DATA -------------------
  List<Map<String, dynamic>> _extractCategoriesFromSpk(List<SpkItem> items) {
    final Map<String, Map<String, dynamic>> categoryMap = {};

    for (var item in items) {
      final category = item.item.category;
      if (category != null && !categoryMap.containsKey(category.id)) {
        categoryMap[category.id] = {
          '_id': category.id,
          'name': category.name,
          'items': [],
        };
      }
      if (category != null) {
        categoryMap[category.id]!['items'].add({
          '_id': item.item.id,
          'description': item.item.description,
          'rate': item.unitRate.remoteAreas,
          'targetQty': item.estQty.quantity.r,
        });
      }
    }
    return categoryMap.values.toList();
  }

  void _loadSavedFormData() {
    try {
      // Get raw data from storage
      final savedData = _storage.read('sales_form_data_$spkId');
      print('Raw saved data: $savedData');
      
      if (savedData == null || _spkDetails == null) {
        print('No saved data or SPK details not available');
        return;
      }
      
      // Skip the model conversion and work directly with the raw data
      if (savedData['progressItems'] == null) {
        print('No progress items in saved data');
        return;
      }
      
      final List<dynamic> progressItems = savedData['progressItems'];
      final List<Map<String, dynamic>> newSelectedItems = [];
      
      // Create a map for quick lookup of items by ID
      final Map<String, Map<String, dynamic>> itemsById = {};
      for (var category in _categories) {
        if (category['items'] is List) {
          for (var item in category['items']) {
            if (item is Map<String, dynamic> && item['_id'] != null) {
              itemsById[item['_id']] = item;
            }
          }
        }
      }
      
      // Process each progress item
      for (var progressItem in progressItems) {
        final String itemId = progressItem['spkItemSnapshot']['item'];
        final Map<String, dynamic>? matchingItem = itemsById[itemId];
        
        if (matchingItem != null) {
          newSelectedItems.add({
            'item': matchingItem,
            'quantity': progressItem['workQty']['quantity']['nr'] ?? 0,
            'rate': progressItem['unitRate']['nonRemoteAreas'] ?? 0,
          });
        }
      }
      
      if (newSelectedItems.isNotEmpty) {
        setState(() {
          _selectedItems = newSelectedItems;
        });
        print('Loaded ${newSelectedItems.length} items successfully');
      }
    } catch (e, stackTrace) {
      print('Error in _loadSavedFormData: $e');
      print('Stack trace: $stackTrace');
    }
  }

  // ------------------- SAVE & SUBMIT -------------------
  Future<void> _saveFormData() async {
    if (_selectedItems.isEmpty) return;

    try {
      final progressItems = _selectedItems.map((item) => {
        'spkItemSnapshot': {
          'item': item['item']['_id'],
          'description': item['item']['description'],
        },
        'workQty': {
          'quantity': {
            'nr': item['quantity'] ?? 0,
            'r': 0,
          },
          'amount': (item['quantity'] ?? 0) * (item['item']['rate'] ?? 0),
        },
        'unitRate': {
          'nonRemoteAreas': item['item']['rate'] ?? 0,
          'remoteAreas': item['item']['rate'] ?? 0,
        },
      }).toList();

      // Extract costs from task form data if available
      List<Map<String, dynamic>> costUsed = [];
      if (_taskFormData != null) {
        if (_taskFormData!['selectedManpower'] != null) {
          costUsed.addAll(_taskFormData!['selectedManpower'].map<Map<String, dynamic>>((mp) => {
            'costType': 'manpower',
            'item': mp['item']['_id'],
            'description': mp['item']['description'],
            'quantity': mp['quantity'] ?? 0,
            'rate': mp['item']['rate'] ?? 0,
            'amount': (mp['quantity'] ?? 0) * (mp['item']['rate'] ?? 0),
          }).toList());
        }
        
        if (_taskFormData!['selectedEquipment'] != null) {
          costUsed.addAll(_taskFormData!['selectedEquipment'].map<Map<String, dynamic>>((eq) => {
            'costType': 'equipment',
            'item': eq['item']['_id'],
            'description': eq['item']['description'],
            'quantity': eq['quantity'] ?? 0,
            'rate': eq['item']['rate'] ?? 0,
            'amount': (eq['quantity'] ?? 0) * (eq['item']['rate'] ?? 0),
          }).toList());
        }
      }

      final salesProgressData = {
        'spk': spkId,
        'progressItems': progressItems,
        'progressDate': DateTime.now().toIso8601String(),
        'timeDetails': {
          'startTime': DateTime.now().toIso8601String(),
          'endTime': DateTime.now().toIso8601String(),
          'dcuTime': DateTime.now().toIso8601String(),
        },
        'images': {
          'startImage': '',
          'endImage': '',
          'dcuImage': '',
        },
        'costUsed': costUsed,
      };

      print('Saving data format: $salesProgressData');
      await _storage.write('sales_form_data_$spkId', salesProgressData);
      print('Data saved successfully');
    } catch (e) {
      print('Error saving data: $e');
    }
  }

  void _showSubmitDialog() {
    showDialog(
      context: context,
      barrierDismissible: true,
      builder: (BuildContext context) {
        return SubmitDialog(
          spkDetails: _spkDetails!,
          selectedItems: _selectedItems,
          taskFormData: _taskFormData,
          onSubmit: (data) {
            final formattedData = SalesFormUtils.buildSalesProgressJson(
              spkId: spkId,
              selectedItems: _selectedItems,
              taskFormData: _taskFormData,
            );
            _submitProgress(formattedData);
          },
        );
      },
    );
  }

  Future<void> _submitProgress(Map<String, dynamic> data) async {
    try {
      EasyLoading.show(status: 'Submitting...');
      // Contoh panggilan API
      // await _apiService.submitSalesProgress(data);
      Get.snackbar('Success', 'Progress submitted successfully');
      Get.back(); // Balik ke halaman sebelumnya
    } catch (e) {
      Get.snackbar('Error', 'Failed to submit progress: $e');
    } finally {
      EasyLoading.dismiss();
    }
  }

  // ------------------- BUILD -------------------
  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    if (_categories.isEmpty) {
      return const Center(child: Text('No categories available'));
    }
    // Load data form yang tersimpan (kalau ada) setelah frame pertama
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_selectedItems.isEmpty) {
        _loadSavedFormData();
      }
    });

    return Scaffold(
      body: Column(
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: const BoxDecoration(
              color: Color(0xFFBF4D00),
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(30),
                bottomRight: Radius.circular(30),
              ),
            ),
            child: SafeArea(
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back, color: Colors.white),
                    onPressed: () => Get.back(),
                  ),
                  const Text(
                    'Input Sales',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Stepper
          Expanded(
            child: SingleChildScrollView(
              child: CupertinoStepper(
                physics: const NeverScrollableScrollPhysics(),
                onStepCancel: () {
                  if (activeStep > 0) {
                    setState(() => activeStep--);
                  } else {
                    Get.back();
                  }
                },
                onStepContinue: () {
                  if (activeStep < _categories.length) {
                    setState(() {
                      activeStep++;
                      _saveFormData();
                    });
                  }
                },
                controlsBuilder: (context, details) => const SizedBox(),
                type: StepperType.vertical,
                currentStep: activeStep.clamp(0, _categories.length),
                onStepTapped: (index) {
                  if (index >= 0 && index <= _categories.length) {
                    setState(() => activeStep = index);
                    // if (index == _categories.length) {
                    //   _showSubmitDialog();
                    // }
                  }
                },
                steps: List.generate(
                  _categories.length + 1,
                  (index) {
                    if (index < _categories.length) {
                      return Step(
                        content: StepContentWidget(
                          category: _categories[index],
                          selectedItems: _selectedItems,
                          spkDetails: _spkDetails!,
                          onQuantityChanged: (itemId, value) {
                            setState(() {
                              final idx = _selectedItems.indexWhere(
                                (selected) => selected['item']['_id'] == itemId,
                              );
                              if (idx >= 0) {
                                _selectedItems[idx]['quantity'] = int.tryParse(value) ?? 0;
                              } else {
                                final catItem = _categories[index]['items']
                                    .firstWhere((it) => it['_id'] == itemId);
                                _selectedItems.add({
                                  'item': catItem,
                                  'quantity': int.tryParse(value) ?? 0,
                                });
                              }
                            });
                          },
                        ),
                        title: Text(
                          '${_categories[index]['name'][0].toUpperCase()}${_categories[index]['name'].substring(1).toLowerCase()}',
                        ),
                        subtitle: const Text('Input Sales'),
                        isActive: index == activeStep,
                        state: index < activeStep ? StepState.complete : StepState.indexed,
                      );
                    } else {
                      print('spkdetails:'+_spkDetails!.toJson().toString());
                      return Step(
                        content: SummaryStepWidget(
                          spkDetails: _spkDetails!,
                          selectedItems: _selectedItems,
                        ),
                        title: const Text('Summary'),
                        subtitle: const Text('Input Sales'),
                        isActive: index == activeStep,
                        state: index < activeStep ? StepState.complete : StepState.indexed,
                      );
                    }
                  },
                ),
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          if (activeStep < _categories.length) {
            setState(() {
              activeStep++;
              _saveFormData();
            });
          } else {
            _showSubmitDialog();
          }
        },
        backgroundColor: const Color(0xFFBF4D00),
        child: const Icon(Icons.arrow_forward, color: Colors.white),
      ),
    );
  }
}
